/*
 * UART.h
 *
 *  Created on: Sep 25, 2024
 *      Author: Mr.hDung
 */

#ifndef SOURCE_MID_UART_UART_H_
#define SOURCE_MID_UART_UART_H_

/******************************************************************************/
/*                                INCLUDEs                                    */
/******************************************************************************/
#include <stdbool.h>
#include <stdlib.h>
#include "app/framework/include/af.h"
#include "Source/Utils/Queue/Queue.h"

/******************************************************************************/
/*                                 DEFINEs                                    */
/******************************************************************************/
// Kich thuoc hang doi
#define SIZE_QUEUE_DATA_RX	256

// The size of the array storing data retrieved from the queue
#define RX_BUFFER_SIZE 					256

#define PAYLOAD_MAX_LENGTH				5

#define FRAME_START 					0xB1
#define CMD_ID							g_strRxBuffer[2]
#define CMD_TYPE						g_strRxBuffer[3]
#define CMD_DATA1						g_strRxBuffer[4]
#define CMD_DATA2						g_strRxBuffer[5]
#define CMD_DATA3						g_strRxBuffer[6]
#define CMD_DATA4						g_strRxBuffer[7]
#define CMD_DATA5						g_strRxBuffer[8]

#define CMD_ID_TEMP_SENSOR 				0x84
#define CMD_ID_HUMI_SENSOR 				0x85
#define CMD_ID_LD2410B_SENSOR 			0x86

// Message retrieving information and status of the device from the host computer
#define CMD_TYPE_GET               		0x00

// Message responding with the device's information and status to the host computer
#define CMD_TYPE_RES               	 	0x01

// Message for controlling the device from the host computer
#define CMD_TYPE_SET               	 	0x02

//#define CMD_DATA_LED_ID					CMD_DATA1
//#define CMD_DATA_LED_COLOR				CMD_DATA2
//#define CMD_DATA_LED_NUMBLINK			CMD_DATA3
//#define CMD_DATA_LED_INTERVAL			CMD_DATA4
//#define CMD_DATA_LED_LASTSTATE			CMD_DATA5
//#define CMD_DATA_BUZZER_STATE			CMD_DATA1
//#define CMD_DATA_BUTTON_EVENT			CMD_DATA1
//#define CMD_DATA_BUTTON_STATE			CMD_DATA2
//#define CMD_DATA_LCD					CMD_DATA1

#define CMD_SEQUENCE					0x00
#define CXOR_INIT_VAL 					0xFF

#define FRAME_ACK 						0x06
#define FRAME_NACK 						0x15

#define USART_PROCESS_SERIAL_INTERVAL	200

/******************************************************************************/
/*                            STRUCTs AND ENUMs                               */
/******************************************************************************/

typedef struct{
	uint8_t length;
//	EmberNodeId nodeId;
//	uint8_t endpoint;
	uint8_t id;
	uint8_t type;
	uint8_t payloadLength;
	uint8_t payload[PAYLOAD_MAX_LENGTH];
	uint8_t sequence;
	uint8_t cxor;
}USART_FRAME;

typedef enum {
    RX_STATE_START_BYTE,
    RX_STATE_DATA_BYTES,
    RX_STATE_CXOR_BYTE
} RX_STATE;

typedef enum {
    USART_STATE_IDLE,
    USART_STATE_DATA_RECEIVED,
    USART_STATE_ACK_RECEIVED,
    USART_STATE_NACK_RECEIVED,
    USART_STATE_ERROR,
    USART_STATE_RX_TIMEOUT,
} USART_STATE;


/******************************************************************************/
/*                       EVENTs AND GLOBAL VARIABLEs                          */
/******************************************************************************/


/******************************************************************************/
/*                           FUNCTIONs  PROTOTYPE                             */
/******************************************************************************/
typedef void (*usartFrameCallback)(USART_STATE);

/******************************************************************************/
/*                               FUNCTIONs                              	  */
/******************************************************************************/










#endif /* SOURCE_MID_UART_UART_H_ */

/* END FILE */

